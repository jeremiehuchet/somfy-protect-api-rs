/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserOutput {
    /// User identifier.
    #[serde(rename = "user_id")]
    pub user_id: String,
    /// User creation date.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Is user account activated?
    #[serde(rename = "activated")]
    pub activated: bool,
    /// Type of user.
    #[serde(rename = "type_user")]
    pub type_user: TypeUser,
    /// Identifier of user who invited this user.
    #[serde(rename = "invited_by", skip_serializing_if = "Option::is_none")]
    pub invited_by: Option<String>,
    /// Username of user who invited this user.
    #[serde(
        rename = "invited_by_displayname",
        skip_serializing_if = "Option::is_none"
    )]
    pub invited_by_displayname: Option<String>,
    /// User invitation status.
    #[serde(rename = "invitation_status", skip_serializing_if = "Option::is_none")]
    pub invitation_status: Option<InvitationStatus>,
    /// Identifier of user photo.
    #[serde(rename = "photo_id", skip_serializing_if = "Option::is_none")]
    pub photo_id: Option<String>,
    /// Name to display for this user.
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// User origin.
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    /// User pro details.
    #[serde(rename = "pro_details", skip_serializing_if = "Option::is_none")]
    pub pro_details: Option<String>,
    /// User firstname.
    #[serde(rename = "firstname", skip_serializing_if = "Option::is_none")]
    pub firstname: Option<String>,
    /// User lastname.
    #[serde(rename = "lastname", skip_serializing_if = "Option::is_none")]
    pub lastname: Option<String>,
    /// User email.
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// User gender.
    #[serde(rename = "gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<Gender>,
    /// User locale.
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    /// User phone number.
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
}

impl UserOutput {
    pub fn new(user_id: String, activated: bool, type_user: TypeUser) -> UserOutput {
        UserOutput {
            user_id,
            created_at: None,
            activated,
            type_user,
            invited_by: None,
            invited_by_displayname: None,
            invitation_status: None,
            photo_id: None,
            display_name: None,
            origin: None,
            pro_details: None,
            firstname: None,
            lastname: None,
            username: None,
            gender: None,
            locale: None,
            phone: None,
        }
    }
}
/// Type of user.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeUser {
    #[serde(rename = "account")]
    Account,
    #[serde(rename = "guest")]
    Guest,
}

impl Default for TypeUser {
    fn default() -> TypeUser {
        Self::Account
    }
}
/// User invitation status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InvitationStatus {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "accepted")]
    Accepted,
    #[serde(rename = "declined")]
    Declined,
    #[serde(rename = "not required")]
    NotRequired,
}

impl Default for InvitationStatus {
    fn default() -> InvitationStatus {
        Self::Pending
    }
}
/// User gender.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "F")]
    F,
    #[serde(rename = "M")]
    M,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::F
    }
}
