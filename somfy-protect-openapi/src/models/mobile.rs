/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Mobile {
    /// Type of mobile phone.
    #[serde(rename = "type")]
    pub r#type: RHashType,
    /// Identifier for pushing message to the phone.
    #[serde(rename = "push_id")]
    pub push_id: String,
    /// Version of operating system.
    #[serde(rename = "version_os")]
    pub version_os: String,
    /// Version of app.
    #[serde(rename = "version_app")]
    pub version_app: String,
    /// Identifier of the phone.
    #[serde(rename = "phone_id")]
    pub phone_id: String,
    /// Current badge value.
    #[serde(rename = "badge", skip_serializing_if = "Option::is_none")]
    pub badge: Option<i32>,
    /// Is app is rich push compatible.
    #[serde(rename = "rich_push_compatible")]
    pub rich_push_compatible: bool,
    /// Is mobile has watch.
    #[serde(rename = "has_watch", skip_serializing_if = "Option::is_none")]
    pub has_watch: Option<bool>,
    /// Push provider.
    #[serde(rename = "type_push_provider", skip_serializing_if = "Option::is_none")]
    pub type_push_provider: Option<String>,
    /// Model of the phone.
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// Manufacturer.
    #[serde(rename = "manufacturer", skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<String>,
    /// Build code app.
    #[serde(rename = "buildcode_app", skip_serializing_if = "Option::is_none")]
    pub buildcode_app: Option<String>,
    /// Branding app.
    #[serde(rename = "branding_app", skip_serializing_if = "Option::is_none")]
    pub branding_app: Option<String>,
    /// App variant.
    #[serde(rename = "app_variant", skip_serializing_if = "Option::is_none")]
    pub app_variant: Option<String>,
    /// H264 Codec.
    #[serde(rename = "h264_codec", skip_serializing_if = "Option::is_none")]
    pub h264_codec: Option<String>,
    /// HEVC Codec.
    #[serde(rename = "hevc_codec", skip_serializing_if = "Option::is_none")]
    pub hevc_codec: Option<String>,
    /// VP8 Codec.
    #[serde(rename = "vp8_codec", skip_serializing_if = "Option::is_none")]
    pub vp8_codec: Option<String>,
    /// VP9 Codec.
    #[serde(rename = "vp9_codec", skip_serializing_if = "Option::is_none")]
    pub vp9_codec: Option<String>,
    /// AV1 Codec.
    #[serde(rename = "av1_codec", skip_serializing_if = "Option::is_none")]
    pub av1_codec: Option<String>,
    /// SOC Model.
    #[serde(rename = "soc_model", skip_serializing_if = "Option::is_none")]
    pub soc_model: Option<String>,
    /// SOC Manufacturer.
    #[serde(rename = "soc_manufacturer", skip_serializing_if = "Option::is_none")]
    pub soc_manufacturer: Option<String>,
    /// Last seen date.
    #[serde(rename = "last_seen_at", skip_serializing_if = "Option::is_none")]
    pub last_seen_at: Option<String>,
}

impl Mobile {
    pub fn new(r#type: RHashType, push_id: String, version_os: String, version_app: String, phone_id: String, rich_push_compatible: bool) -> Mobile {
        Mobile {
            r#type,
            push_id,
            version_os,
            version_app,
            phone_id,
            badge: None,
            rich_push_compatible,
            has_watch: None,
            type_push_provider: None,
            model: None,
            manufacturer: None,
            buildcode_app: None,
            branding_app: None,
            app_variant: None,
            h264_codec: None,
            hevc_codec: None,
            vp8_codec: None,
            vp9_codec: None,
            av1_codec: None,
            soc_model: None,
            soc_manufacturer: None,
            last_seen_at: None,
        }
    }
}

/// Type of mobile phone.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "ios")]
    Ios,
    #[serde(rename = "android")]
    Android,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Ios
    }
}

