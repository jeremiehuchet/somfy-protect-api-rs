/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DeviceSettingsGlobal {
    /// User associated to this device (for remote).
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Wifi SSID (for plug and camera).
    #[serde(rename = "wifi_ssid", skip_serializing_if = "Option::is_none")]
    pub wifi_ssid: Option<String>,
    /// Enable detection (for camera).
    #[serde(rename = "detection_enabled", skip_serializing_if = "Option::is_none")]
    pub detection_enabled: Option<bool>,
    /// Enable sound (for siren and keypad).
    #[serde(rename = "sound_enabled", skip_serializing_if = "Option::is_none")]
    pub sound_enabled: Option<bool>,
    /// Enable lights (for siren and pir).
    #[serde(rename = "light_enabled", skip_serializing_if = "Option::is_none")]
    pub light_enabled: Option<bool>,
    /// Test reminder (for smoke detector).
    #[serde(rename = "test_reminder_enabled", skip_serializing_if = "Option::is_none")]
    pub test_reminder_enabled: Option<bool>,
    /// Extended alarm (for smoke detector).
    #[serde(rename = "extended_alarm_enabled", skip_serializing_if = "Option::is_none")]
    pub extended_alarm_enabled: Option<bool>,
    /// Keypad security parameter.
    #[serde(rename = "code_required_to_arm", skip_serializing_if = "Option::is_none")]
    pub code_required_to_arm: Option<bool>,
    /// Sensitivity (for IntelliTAG, Camera).
    #[serde(rename = "sensitivity", skip_serializing_if = "Option::is_none")]
    pub sensitivity: Option<i32>,
    /// Sensitivity level (for PIR).
    #[serde(rename = "sensitivity_level", skip_serializing_if = "Option::is_none")]
    pub sensitivity_level: Option<SensitivityLevel>,
    /// Support type (for IntelliTAG).
    #[serde(rename = "support_type", skip_serializing_if = "Option::is_none")]
    pub support_type: Option<String>,
    /// Night vision (for camera).
    #[serde(rename = "night_vision", skip_serializing_if = "Option::is_none")]
    pub night_vision: Option<NightVision>,
    /// LED Enabled (for camera).
    #[serde(rename = "led_enabled", skip_serializing_if = "Option::is_none")]
    pub led_enabled: Option<serde_json::Value>,
    /// HD Video Enabled (for camera).
    #[serde(rename = "hdvideo_enabled", skip_serializing_if = "Option::is_none")]
    pub hdvideo_enabled: Option<bool>,
    /// Video modes (for AIO).
    #[serde(rename = "video_mode", skip_serializing_if = "Option::is_none")]
    pub video_mode: Option<VideoMode>,
    /// Detection Regions (for camera).
    #[serde(rename = "detection_regions", skip_serializing_if = "Option::is_none")]
    pub detection_regions: Option<bool>,
    /// Device Enabled (for remote).
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Enable-Disable pre-alarm (for IntelliTAG, Camera and Pir).
    #[serde(rename = "prealarm_enabled", skip_serializing_if = "Option::is_none")]
    pub prealarm_enabled: Option<bool>,
    /// Enable-Disable auto-protection (for Keypad, Pir and Siren).
    #[serde(rename = "auto_protect_enabled", skip_serializing_if = "Option::is_none")]
    pub auto_protect_enabled: Option<bool>,
    /// Threshold acceleration (for Outdoor Siren).
    #[serde(rename = "thresholdAcc", skip_serializing_if = "Option::is_none")]
    pub threshold_acc: Option<i32>,
    /// Enable-Disable smoke alarm listening (for Camera).
    #[serde(rename = "smoke_alarm_listening_enabled", skip_serializing_if = "Option::is_none")]
    pub smoke_alarm_listening_enabled: Option<bool>,
    /// Define smoke alarm setting (for SomfyOne and SomfyOne+).
    #[serde(rename = "smoke_alarm_state", skip_serializing_if = "Option::is_none")]
    pub smoke_alarm_state: Option<SmokeAlarmState>,
    /// Enable-Disable use in night mode (for TAG, Camera and Pir).
    #[serde(rename = "night_mode_enabled", skip_serializing_if = "Option::is_none")]
    pub night_mode_enabled: Option<bool>,
    /// Enable-Disable sound recording (for MyfoxCamera).
    #[serde(rename = "sound_recording_enabled", skip_serializing_if = "Option::is_none")]
    pub sound_recording_enabled: Option<bool>,
    /// Enable siren on camera detection (for AIO).
    #[serde(rename = "siren_on_camera_detection_disabled", skip_serializing_if = "Option::is_none")]
    pub siren_on_camera_detection_disabled: Option<bool>,
    /// Enable outdoor camera's siren.
    #[serde(rename = "siren_disabled", skip_serializing_if = "Option::is_none")]
    pub siren_disabled: Option<bool>,
    /// Enable-Disable video rotation (for OutdoorCamera).
    #[serde(rename = "autoRotateEnabled", skip_serializing_if = "Option::is_none")]
    pub auto_rotate_enabled: Option<bool>,
    /// OutdoorCamera auto rotate .
    #[serde(rename = "autoRotateOrientation", skip_serializing_if = "Option::is_none")]
    pub auto_rotate_orientation: Option<bool>,
    /// Smart alarm duration (for OutdoorCamera).
    #[serde(rename = "smart_alarm_duration", skip_serializing_if = "Option::is_none")]
    pub smart_alarm_duration: Option<i32>,
    /// Enable-Disable siren sound pre-alarm (true:Siren, false:Voice) (for OutdoorCamera).
    #[serde(rename = "sound_alarm", skip_serializing_if = "Option::is_none")]
    pub sound_alarm: Option<bool>,
    /// Trigger for lighting (for OutdoorCamera).
    #[serde(rename = "lighting_trigger", skip_serializing_if = "Option::is_none")]
    pub lighting_trigger: Option<LightingTrigger>,
    /// Ambient light threshold (for OutdoorCamera).
    #[serde(rename = "ambient_light_threshold", skip_serializing_if = "Option::is_none")]
    pub ambient_light_threshold: Option<i32>,
    /// Lighting duration when detection (for OutdoorCamera).
    #[serde(rename = "lighting_duration", skip_serializing_if = "Option::is_none")]
    pub lighting_duration: Option<i32>,
    /// Is lighting is wired to device ? (for OutdoorCamera).
    #[serde(rename = "lighting_wired", skip_serializing_if = "Option::is_none")]
    pub lighting_wired: Option<bool>,
    /// Locale voice for pre-alarm ? (for OutdoorCamera).
    #[serde(rename = "voice_alarm_locale", skip_serializing_if = "Option::is_none")]
    pub voice_alarm_locale: Option<String>,
    /// HDR video (for AllInOne, AllInOne+, IndoorCamera, OutdoorCamera).
    #[serde(rename = "hdr_enabled", skip_serializing_if = "Option::is_none")]
    pub hdr_enabled: Option<bool>,
    /// Human Detect Enabled (for OutdoorCamera).
    #[serde(rename = "human_detect_enabled", skip_serializing_if = "Option::is_none")]
    pub human_detect_enabled: Option<bool>,
    /// Is latch wired?
    #[serde(rename = "latch_wired", skip_serializing_if = "Option::is_none")]
    pub latch_wired: Option<serde_json::Value>,
    /// Is gate wired?
    #[serde(rename = "gate_wired", skip_serializing_if = "Option::is_none")]
    pub gate_wired: Option<serde_json::Value>,
}

impl DeviceSettingsGlobal {
    pub fn new() -> DeviceSettingsGlobal {
        DeviceSettingsGlobal {
            user_id: None,
            wifi_ssid: None,
            detection_enabled: None,
            sound_enabled: None,
            light_enabled: None,
            test_reminder_enabled: None,
            extended_alarm_enabled: None,
            code_required_to_arm: None,
            sensitivity: None,
            sensitivity_level: None,
            support_type: None,
            night_vision: None,
            led_enabled: None,
            hdvideo_enabled: None,
            video_mode: None,
            detection_regions: None,
            enabled: None,
            prealarm_enabled: None,
            auto_protect_enabled: None,
            threshold_acc: None,
            smoke_alarm_listening_enabled: None,
            smoke_alarm_state: None,
            night_mode_enabled: None,
            sound_recording_enabled: None,
            siren_on_camera_detection_disabled: None,
            siren_disabled: None,
            auto_rotate_enabled: None,
            auto_rotate_orientation: None,
            smart_alarm_duration: None,
            sound_alarm: None,
            lighting_trigger: None,
            ambient_light_threshold: None,
            lighting_duration: None,
            lighting_wired: None,
            voice_alarm_locale: None,
            hdr_enabled: None,
            human_detect_enabled: None,
            latch_wired: None,
            gate_wired: None,
        }
    }
}

/// Sensitivity level (for PIR).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SensitivityLevel {
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "high")]
    High,
}

impl Default for SensitivityLevel {
    fn default() -> SensitivityLevel {
        Self::Low
    }
}
/// Night vision (for camera).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NightVision {
    #[serde(rename = "on")]
    On,
    #[serde(rename = "off")]
    Off,
    #[serde(rename = "automatic")]
    Automatic,
}

impl Default for NightVision {
    fn default() -> NightVision {
        Self::On
    }
}
/// Video modes (for AIO).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VideoMode {
    #[serde(rename = "SD")]
    Sd,
    #[serde(rename = "HD")]
    Hd,
    #[serde(rename = "FHD")]
    Fhd,
}

impl Default for VideoMode {
    fn default() -> VideoMode {
        Self::Sd
    }
}
/// Define smoke alarm setting (for SomfyOne and SomfyOne+).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SmokeAlarmState {
    #[serde(rename = "never")]
    Never,
    #[serde(rename = "armed")]
    Armed,
    #[serde(rename = "always")]
    Always,
}

impl Default for SmokeAlarmState {
    fn default() -> SmokeAlarmState {
        Self::Never
    }
}
/// Trigger for lighting (for OutdoorCamera).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LightingTrigger {
    #[serde(rename = "always")]
    Always,
    #[serde(rename = "alarm_on")]
    AlarmOn,
    #[serde(rename = "manual")]
    Manual,
}

impl Default for LightingTrigger {
    fn default() -> LightingTrigger {
        Self::Always
    }
}

