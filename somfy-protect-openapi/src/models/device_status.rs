/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceStatus {
    /// Last status date (AIO, AIO+, Box, Extender, OutdoorSiren, Pir, Remote, Siren, Tag).
    #[serde(rename = "last_status_at", skip_serializing_if = "Option::is_none")]
    pub last_status_at: Option<String>,
    /// rLink Quality (AIO, AIO+, Camera, Extender, OutdoorSiren, Pir, Remote, Siren, Tag).
    #[serde(rename = "rlink_quality", skip_serializing_if = "Option::is_none")]
    pub rlink_quality: Option<i32>,
    /// rLink Quality Percent (AIO, AIO+, Camera, Extender, OutdoorSiren, Pir, Siren, Tag).
    #[serde(
        rename = "rlink_quality_percent",
        skip_serializing_if = "Option::is_none"
    )]
    pub rlink_quality_percent: Option<i32>,
    /// Level of battery (AIO+, Box, OutdoorSiren, Pir, Remote, Siren, Tag).
    #[serde(rename = "battery_level", skip_serializing_if = "Option::is_none")]
    pub battery_level: Option<i32>,
    /// Is device lost ? (Extender, OutdoorSiren, Pir, Remote, Siren, Tag).
    #[serde(rename = "device_lost", skip_serializing_if = "Option::is_none")]
    pub device_lost: Option<bool>,
    /// Power mode (AIO, AIO+, Box, Camera, Extender).
    #[serde(rename = "power_mode", skip_serializing_if = "Option::is_none")]
    pub power_mode: Option<PowerMode>,
    /// Time of last online (AIO, AIO+, Box, Camera).
    #[serde(rename = "last_online_at", skip_serializing_if = "Option::is_none")]
    pub last_online_at: Option<String>,
    /// Time of last offline (AIO, AIO+, Box, Camera).
    #[serde(rename = "last_offline_at", skip_serializing_if = "Option::is_none")]
    pub last_offline_at: Option<String>,
    /// Level of wifi signal (AIO, AIO+, Box, Camera).
    #[serde(rename = "wifi_level", skip_serializing_if = "Option::is_none")]
    pub wifi_level: Option<i32>,
    /// Wifi Level Percent (AIO, AIO+, Box, Camera).
    #[serde(rename = "wifi_level_percent", skip_serializing_if = "Option::is_none")]
    pub wifi_level_percent: Option<i32>,
    /// Power state (AIO, AIO+, Box).
    #[serde(rename = "power_state", skip_serializing_if = "Option::is_none")]
    pub power_state: Option<i32>,
    /// mfa Quality Percent (AIO, AIO+, Box).
    #[serde(
        rename = "mfa_quality_percent",
        skip_serializing_if = "Option::is_none"
    )]
    pub mfa_quality_percent: Option<i32>,
    /// Last myfox around test (AIO, AIO+, Box).
    #[serde(rename = "mfa_last_test_at", skip_serializing_if = "Option::is_none")]
    pub mfa_last_test_at: Option<String>,
    /// Last myfox around test success (AIO, AIO+, Box).
    #[serde(
        rename = "mfa_last_test_success_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub mfa_last_test_success_at: Option<String>,
    /// Last MFA online status (AIO, AIO+, Box).
    #[serde(rename = "mfa_last_online_at", skip_serializing_if = "Option::is_none")]
    pub mfa_last_online_at: Option<String>,
    /// Last MFA ofline status (AIO, AIO+, Box).
    #[serde(
        rename = "mfa_last_offline_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub mfa_last_offline_at: Option<String>,
    /// Last MFA connected status (AIO, AIO+, Box).
    #[serde(
        rename = "mfa_last_connected_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub mfa_last_connected_at: Option<String>,
    /// Last MFA disconnected status (AIO, AIO+, Box).
    #[serde(
        rename = "mfa_last_disconnected_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub mfa_last_disconnected_at: Option<String>,
    /// Shutter state (AIO, AIO+, Camera).
    #[serde(rename = "shutter_state", skip_serializing_if = "Option::is_none")]
    pub shutter_state: Option<ShutterState>,
    /// Last shutter opened (AIO, AIO+, Camera).
    #[serde(
        rename = "last_shutter_opened_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_shutter_opened_at: Option<String>,
    /// Last shutter closed (AIO, AIO+, Camera).
    #[serde(
        rename = "last_shutter_closed_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_shutter_closed_at: Option<String>,
    /// rLink state (Remote, Siren, Tag).
    #[serde(rename = "rlink_state", skip_serializing_if = "Option::is_none")]
    pub rlink_state: Option<i32>,
    /// Lorawan Quality Percent (AIO+, Box).
    #[serde(
        rename = "lora_quality_percent",
        skip_serializing_if = "Option::is_none"
    )]
    pub lora_quality_percent: Option<i32>,
    /// Last LoraWan test (AIO+, Box).
    #[serde(rename = "lora_last_test_at", skip_serializing_if = "Option::is_none")]
    pub lora_last_test_at: Option<String>,
    /// Last LoraWan success test (AIO+, Box).
    #[serde(
        rename = "lora_last_test_success_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub lora_last_test_success_at: Option<String>,
    /// Last LoraWan online status (AIO+, Box).
    #[serde(
        rename = "lora_last_online_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub lora_last_online_at: Option<String>,
    /// Last LoraWan offline status (AIO+, Box).
    #[serde(
        rename = "lora_last_offline_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub lora_last_offline_at: Option<String>,
    /// Last LoraWan connected status (AIO+, Box).
    #[serde(
        rename = "lora_last_connected_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub lora_last_connected_at: Option<String>,
    /// Last LoraWan disconnected status (AIO+, Box).
    #[serde(
        rename = "lora_last_disconnected_at",
        skip_serializing_if = "Option::is_none"
    )]
    pub lora_last_disconnected_at: Option<String>,
    /// Temperature (Pir, OutdoorSiren).
    #[serde(rename = "temperature", skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f32>,
    /// Time of last temperature (OutdoorSiren, Pir).
    #[serde(rename = "temperatureAt", skip_serializing_if = "Option::is_none")]
    pub temperature_at: Option<String>,
    /// FSK Level (Box).
    #[serde(rename = "fsk_level", skip_serializing_if = "Option::is_none")]
    pub fsk_level: Option<i32>,
    /// BLE Level (Box).
    #[serde(rename = "ble_level", skip_serializing_if = "Option::is_none")]
    pub ble_level: Option<i32>,
    /// Battery status (Extender).
    #[serde(rename = "battery_status", skip_serializing_if = "Option::is_none")]
    pub battery_status: Option<i32>,
    /// Time of outdoor siren installation (OutdoorSiren).
    #[serde(rename = "mounted_at", skip_serializing_if = "Option::is_none")]
    pub mounted_at: Option<String>,
    /// Is battery low (Pir).
    #[serde(rename = "battery_low", skip_serializing_if = "Option::is_none")]
    pub battery_low: Option<bool>,
    /// Remote battery level state (Remote).
    #[serde(
        rename = "battery_level_state",
        skip_serializing_if = "Option::is_none"
    )]
    pub battery_level_state: Option<String>,
    /// Remote keep alive (Remote).
    #[serde(rename = "keep_alive", skip_serializing_if = "Option::is_none")]
    pub keep_alive: Option<i32>,
    /// Last check in from remote (Remote).
    #[serde(
        rename = "last_check_in_state",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_check_in_state: Option<String>,
    /// Last check out from remote (Remote).
    #[serde(
        rename = "last_check_out_state",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_check_out_state: Option<String>,
    /// Is Tag recalibration required (Tag).
    #[serde(
        rename = "recalibration_required",
        skip_serializing_if = "Option::is_none"
    )]
    pub recalibration_required: Option<bool>,
    /// Is Tag can be recalibrate (Tag).
    #[serde(rename = "recalibrateable", skip_serializing_if = "Option::is_none")]
    pub recalibrateable: Option<bool>,
    /// Is Tag cover present (Tag).
    #[serde(rename = "cover_present", skip_serializing_if = "Option::is_none")]
    pub cover_present: Option<bool>,
    /// Is Homekit capable ? (SOC).
    #[serde(rename = "homekit_capable", skip_serializing_if = "Option::is_none")]
    pub homekit_capable: Option<bool>,
}

impl DeviceStatus {
    pub fn new() -> DeviceStatus {
        DeviceStatus {
            last_status_at: None,
            rlink_quality: None,
            rlink_quality_percent: None,
            battery_level: None,
            device_lost: None,
            power_mode: None,
            last_online_at: None,
            last_offline_at: None,
            wifi_level: None,
            wifi_level_percent: None,
            power_state: None,
            mfa_quality_percent: None,
            mfa_last_test_at: None,
            mfa_last_test_success_at: None,
            mfa_last_online_at: None,
            mfa_last_offline_at: None,
            mfa_last_connected_at: None,
            mfa_last_disconnected_at: None,
            shutter_state: None,
            last_shutter_opened_at: None,
            last_shutter_closed_at: None,
            rlink_state: None,
            lora_quality_percent: None,
            lora_last_test_at: None,
            lora_last_test_success_at: None,
            lora_last_online_at: None,
            lora_last_offline_at: None,
            lora_last_connected_at: None,
            lora_last_disconnected_at: None,
            temperature: None,
            temperature_at: None,
            fsk_level: None,
            ble_level: None,
            battery_status: None,
            mounted_at: None,
            battery_low: None,
            battery_level_state: None,
            keep_alive: None,
            last_check_in_state: None,
            last_check_out_state: None,
            recalibration_required: None,
            recalibrateable: None,
            cover_present: None,
            homekit_capable: None,
        }
    }
}
/// Power mode (AIO, AIO+, Box, Camera, Extender).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PowerMode {
    #[serde(rename = "battery")]
    Battery,
    #[serde(rename = "current")]
    Current,
}

impl Default for PowerMode {
    fn default() -> PowerMode {
        Self::Battery
    }
}
/// Shutter state (AIO, AIO+, Camera).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ShutterState {
    #[serde(rename = "opened")]
    Opened,
    #[serde(rename = "closed")]
    Closed,
}

impl Default for ShutterState {
    fn default() -> ShutterState {
        Self::Opened
    }
}
