/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SiteEventOrigin {
    /// Type of origin.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// User identifier if type is 'user'.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Device identifier if type is 'device'.
    #[serde(rename = "device_id", skip_serializing_if = "Option::is_none")]
    pub device_id: Option<String>,
    /// Device definition identifier if type is 'device'.
    #[serde(
        rename = "device_definition_id",
        skip_serializing_if = "Option::is_none"
    )]
    pub device_definition_id: Option<DeviceDefinitionId>,
    /// Origin of detection.
    #[serde(rename = "detection", skip_serializing_if = "Option::is_none")]
    pub detection: Option<Detection>,
}

impl SiteEventOrigin {
    pub fn new(r#type: Type) -> SiteEventOrigin {
        SiteEventOrigin {
            r#type,
            user_id: None,
            device_id: None,
            device_definition_id: None,
            detection: None,
        }
    }
}
/// Type of origin.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "device")]
    Device,
}

impl Default for Type {
    fn default() -> Type {
        Self::User
    }
}
/// Device definition identifier if type is 'device'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DeviceDefinitionId {
    #[serde(rename = "mss_camera")]
    Camera,
    #[serde(rename = "mss_plug")]
    Plug,
    #[serde(rename = "mss_remote")]
    Remote,
    #[serde(rename = "mss_siren")]
    Siren,
    #[serde(rename = "mss_tag")]
    Tag,
}

impl Default for DeviceDefinitionId {
    fn default() -> DeviceDefinitionId {
        Self::Camera
    }
}
/// Origin of detection.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Detection {
    #[serde(rename = "infrared")]
    Infrared,
    #[serde(rename = "opening")]
    Opening,
    #[serde(rename = "shock")]
    Shock,
    #[serde(rename = "panic")]
    Panic,
    #[serde(rename = "image")]
    Image,
    #[serde(rename = "noise")]
    Noise,
    #[serde(rename = "face")]
    Face,
    #[serde(rename = "jamming")]
    Jamming,
}

impl Default for Detection {
    fn default() -> Detection {
        Self::Infrared
    }
}
