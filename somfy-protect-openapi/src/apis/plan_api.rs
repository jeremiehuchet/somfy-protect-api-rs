/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`site_available_plan_list`]
#[derive(Clone, Debug, Default)]
pub struct SiteAvailablePlanListParams {
    /// Site identifier
    pub site_id: String
}

/// struct for passing parameters to the method [`site_cancellationi_immediately`]
#[derive(Clone, Debug, Default)]
pub struct SiteCancellationiImmediatelyParams {
    /// Site identifier
    pub site_id: String,
    /// Send email on unsubscribe
    pub unsubscribe_input: Option<crate::models::ServiceUnsubscribeInput>
}

/// struct for passing parameters to the method [`site_checkout`]
#[derive(Clone, Debug, Default)]
pub struct SiteCheckoutParams {
    /// Site identifier
    pub site_id: String,
    /// Checkout data
    pub checkout_input: crate::models::ServiceCheckoutInput
}

/// struct for passing parameters to the method [`site_current_plan_list`]
#[derive(Clone, Debug, Default)]
pub struct SiteCurrentPlanListParams {
    /// Site identifier
    pub site_id: String
}

/// struct for passing parameters to the method [`site_payment_method_update`]
#[derive(Clone, Debug, Default)]
pub struct SitePaymentMethodUpdateParams {
    /// Site identifier
    pub site_id: String
}

/// struct for passing parameters to the method [`site_remove_scheduled_cancellation`]
#[derive(Clone, Debug, Default)]
pub struct SiteRemoveScheduledCancellationParams {
    /// Site identifier
    pub site_id: String
}


/// struct for typed errors of method [`site_available_plan_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SiteAvailablePlanListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`site_cancellationi_immediately`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SiteCancellationiImmediatelyError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`site_checkout`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SiteCheckoutError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`site_current_plan_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SiteCurrentPlanListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`site_payment_method_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SitePaymentMethodUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`site_remove_scheduled_cancellation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SiteRemoveScheduledCancellationError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}


pub async fn site_available_plan_list(configuration: &configuration::Configuration, params: SiteAvailablePlanListParams) -> Result<crate::models::PlanAvailable, Error<SiteAvailablePlanListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/plan/available", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SiteAvailablePlanListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn site_cancellationi_immediately(configuration: &configuration::Configuration, params: SiteCancellationiImmediatelyParams) -> Result<(), Error<SiteCancellationiImmediatelyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let unsubscribe_input = params.unsubscribe_input;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/plan/unsubscribe/immediately", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&unsubscribe_input);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SiteCancellationiImmediatelyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn site_checkout(configuration: &configuration::Configuration, params: SiteCheckoutParams) -> Result<crate::models::ServiceCheckoutOutput, Error<SiteCheckoutError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let checkout_input = params.checkout_input;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/plan/checkout", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&checkout_input);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SiteCheckoutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn site_current_plan_list(configuration: &configuration::Configuration, params: SiteCurrentPlanListParams) -> Result<crate::models::PlanCurrent, Error<SiteCurrentPlanListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/plan/current", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SiteCurrentPlanListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn site_payment_method_update(configuration: &configuration::Configuration, params: SitePaymentMethodUpdateParams) -> Result<crate::models::ServiceCheckoutOutput, Error<SitePaymentMethodUpdateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/payment-method/update", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SitePaymentMethodUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn site_remove_scheduled_cancellation(configuration: &configuration::Configuration, params: SiteRemoveScheduledCancellationParams) -> Result<(), Error<SiteRemoveScheduledCancellationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/plan/unsubscribe", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SiteRemoveScheduledCancellationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

