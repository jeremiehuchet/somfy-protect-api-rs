/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`site_installer_add`]
#[derive(Clone, Debug, Default)]
pub struct SiteInstallerAddParams {
    /// Site identifier
    pub site_id: String,
    /// Access token
    pub access_token: String,
    /// User email
    pub email: crate::models::SiteInstallerAddRequest,
}

/// struct for passing parameters to the method [`site_installer_delete`]
#[derive(Clone, Debug, Default)]
pub struct SiteInstallerDeleteParams {
    /// Site identifier
    pub site_id: String,
    /// User identifier
    pub user_id: String,
    /// Access token
    pub access_token: String,
    /// Password to check.
    pub password: crate::models::SiteInstallerDeleteRequest,
}

/// struct for typed errors of method [`site_installer_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SiteInstallerAddError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`site_installer_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SiteInstallerDeleteError {
    UnknownValue(serde_json::Value),
}

pub async fn site_installer_add(
    configuration: &configuration::Configuration,
    params: SiteInstallerAddParams,
) -> Result<crate::models::UserOutput, Error<SiteInstallerAddError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let access_token = params.access_token;
    let email = params.email;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/site/{site_id}/installer",
        local_var_configuration.base_path,
        site_id = crate::apis::urlencode(site_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("access_token", &access_token.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&email);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SiteInstallerAddError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn site_installer_delete(
    configuration: &configuration::Configuration,
    params: SiteInstallerDeleteParams,
) -> Result<(), Error<SiteInstallerDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let user_id = params.user_id;
    let access_token = params.access_token;
    let password = params.password;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/site/{site_id}/installer/{user_id}",
        local_var_configuration.base_path,
        site_id = crate::apis::urlencode(site_id),
        user_id = crate::apis::urlencode(user_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("access_token", &access_token.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&password);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SiteInstallerDeleteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
