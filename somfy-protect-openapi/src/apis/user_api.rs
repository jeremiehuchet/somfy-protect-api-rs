/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};

/// struct for passing parameters to the method [`create_user`]
#[derive(Clone, Debug)]
pub struct CreateUserParams {
    /// Details of link between site and user
    pub site_user_link: models::UserInput,
}

/// struct for passing parameters to the method [`delete_sp_data`]
#[derive(Clone, Debug)]
pub struct DeleteSpDataParams {
    /// Access token
    pub access_token: String,
    /// Current OAuth Client ID (Example : 123456_132456)
    pub client_id: String,
    /// Password to check.
    pub password: serde_json::Value,
    /// (1) -> Delete user and SSO link<br>(2) -> Make user GDPR compliant (default)
    pub delete: Option<i32>,
}

/// struct for passing parameters to the method [`send_password_token`]
#[derive(Clone, Debug)]
pub struct SendPasswordTokenParams {
    /// Email of user that needs password change
    pub username: String,
}

/// struct for passing parameters to the method [`update_user`]
#[derive(Clone, Debug)]
pub struct UpdateUserParams {
    /// User identifier. Current logged user if not provided
    pub user_id: String,
    /// User object
    pub user: models::UserInputForUpdate,
}

/// struct for passing parameters to the method [`update_user_with_token`]
#[derive(Clone, Debug)]
pub struct UpdateUserWithTokenParams {
    /// secure token
    pub security_token: String,
    /// User details
    pub user: models::UserInputWithSecureToken,
}

/// struct for passing parameters to the method [`user_guest_create`]
#[derive(Clone, Debug)]
pub struct UserGuestCreateParams {
    /// Details of link between site and user
    pub site_user_link: models::UserGuestInput,
}

/// struct for passing parameters to the method [`user_password_set`]
#[derive(Clone, Debug)]
pub struct UserPasswordSetParams {
    /// User identifier
    pub user_id: String,
    /// Password details
    pub password: models::Password,
}

/// struct for passing parameters to the method [`validate_email`]
#[derive(Clone, Debug)]
pub struct ValidateEmailParams {
    /// Email to validate.
    pub email: String,
}

/// struct for typed errors of method [`create_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_sp_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSpDataError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`send_password_token`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendPasswordTokenError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_user_with_token`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateUserWithTokenError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`user_guest_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UserGuestCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`user_password_set`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UserPasswordSetError {
    Status404(models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`validate_email`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ValidateEmailError {
    UnknownValue(serde_json::Value),
}

pub async fn create_user(
    configuration: &configuration::Configuration,
    params: CreateUserParams,
) -> Result<models::UserOutput, Error<CreateUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_user_link = params.site_user_link;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/user/register", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&site_user_link);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateUserError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_sp_data(
    configuration: &configuration::Configuration,
    params: DeleteSpDataParams,
) -> Result<(), Error<DeleteSpDataError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let access_token = params.access_token;
    let client_id = params.client_id;
    let password = params.password;
    let delete = params.delete;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/user/gdpr-delete", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("access_token", &access_token.to_string())]);
    if let Some(ref local_var_str) = delete {
        local_var_req_builder =
            local_var_req_builder.query(&[("delete", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("client-id", client_id.to_string());
    local_var_req_builder = local_var_req_builder.json(&password);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteSpDataError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn send_password_token(
    configuration: &configuration::Configuration,
    params: SendPasswordTokenParams,
) -> Result<(), Error<SendPasswordTokenError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let username = params.username;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/user/password/send", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("username", &username.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SendPasswordTokenError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_user(
    configuration: &configuration::Configuration,
    params: UpdateUserParams,
) -> Result<(), Error<UpdateUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let user = params.user;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/user/{user_id}",
        local_var_configuration.base_path,
        user_id = crate::apis::urlencode(user_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&user);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UpdateUserError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_user_with_token(
    configuration: &configuration::Configuration,
    params: UpdateUserWithTokenParams,
) -> Result<(), Error<UpdateUserWithTokenError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let security_token = params.security_token;
    let user = params.user;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/user/secure", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("security_token", &security_token.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&user);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UpdateUserWithTokenError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Creates a new user without credentials, associated to the site and available for fob / user association
pub async fn user_guest_create(
    configuration: &configuration::Configuration,
    params: UserGuestCreateParams,
) -> Result<models::UserGuestOutput, Error<UserGuestCreateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_user_link = params.site_user_link;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/user-guest", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&site_user_link);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UserGuestCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn user_password_set(
    configuration: &configuration::Configuration,
    params: UserPasswordSetParams,
) -> Result<(), Error<UserPasswordSetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let user_id = params.user_id;
    let password = params.password;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/user/{user_id}/password",
        local_var_configuration.base_path,
        user_id = crate::apis::urlencode(user_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&password);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UserPasswordSetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn validate_email(
    configuration: &configuration::Configuration,
    params: ValidateEmailParams,
) -> Result<models::ValidateEmail200Response, Error<ValidateEmailError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let email = params.email;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/user/validate-email/{email}",
        local_var_configuration.base_path,
        email = crate::apis::urlencode(email)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ValidateEmailError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
