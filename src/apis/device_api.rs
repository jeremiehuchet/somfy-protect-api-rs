/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`answer_call`]
#[derive(Clone, Debug, Default)]
pub struct AnswerCallParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String,
    /// WebRTC Session identifier
    pub session_id: crate::models::WebRtcSessionInput
}

/// struct for passing parameters to the method [`device_action`]
#[derive(Clone, Debug, Default)]
pub struct DeviceActionParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier or 'all'
    pub device_id: String,
    /// Device action
    pub device_details: crate::models::DeviceAction
}

/// struct for passing parameters to the method [`device_calibration_start`]
#[derive(Clone, Debug, Default)]
pub struct DeviceCalibrationStartParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String
}

/// struct for passing parameters to the method [`device_calibration_stop`]
#[derive(Clone, Debug, Default)]
pub struct DeviceCalibrationStopParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String
}

/// struct for passing parameters to the method [`device_get_details`]
#[derive(Clone, Debug, Default)]
pub struct DeviceGetDetailsParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String
}

/// struct for passing parameters to the method [`device_homekit_installation_start`]
#[derive(Clone, Debug, Default)]
pub struct DeviceHomekitInstallationStartParams {
    /// Site identifier
    pub site_id: String,
    /// Model of device
    pub model: String,
    /// Options for installing the device
    pub install_options: Option<crate::models::InstallOptionsHomeKit>
}

/// struct for passing parameters to the method [`device_homekit_updates_get`]
#[derive(Clone, Debug, Default)]
pub struct DeviceHomekitUpdatesGetParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String
}

/// struct for passing parameters to the method [`device_installation_extend`]
#[derive(Clone, Debug, Default)]
pub struct DeviceInstallationExtendParams {
    /// Site identifier
    pub site_id: String,
    /// Model of device
    pub model: String,
    /// Options for extending installation
    pub extend_options: crate::models::ExtendOptions
}

/// struct for passing parameters to the method [`device_installation_start`]
#[derive(Clone, Debug, Default)]
pub struct DeviceInstallationStartParams {
    /// Site identifier
    pub site_id: String,
    /// Model of device
    pub model: String,
    /// Options for installing the device
    pub install_options: Option<crate::models::InstallOptions>
}

/// struct for passing parameters to the method [`device_installation_stop`]
#[derive(Clone, Debug, Default)]
pub struct DeviceInstallationStopParams {
    /// Site identifier
    pub site_id: String,
    /// Model of device
    pub model: String
}

/// struct for passing parameters to the method [`device_reset`]
#[derive(Clone, Debug, Default)]
pub struct DeviceResetParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String,
    /// Wifi SSID and password
    pub wifi_credentials: Option<crate::models::WifiCredentials>
}

/// struct for passing parameters to the method [`device_reset_wifi`]
#[derive(Clone, Debug, Default)]
pub struct DeviceResetWifiParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String
}

/// struct for passing parameters to the method [`device_set_details`]
#[derive(Clone, Debug, Default)]
pub struct DeviceSetDetailsParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String,
    /// Device details
    pub device_details: crate::models::DeviceInput
}

/// struct for passing parameters to the method [`device_sound`]
#[derive(Clone, Debug, Default)]
pub struct DeviceSoundParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String,
    /// Sound to play
    pub sound_ref: String
}

/// struct for passing parameters to the method [`device_uninstall_start`]
#[derive(Clone, Debug, Default)]
pub struct DeviceUninstallStartParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String
}

/// struct for passing parameters to the method [`device_uninstall_stop`]
#[derive(Clone, Debug, Default)]
pub struct DeviceUninstallStopParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String
}

/// struct for passing parameters to the method [`device_update_firmware`]
#[derive(Clone, Debug, Default)]
pub struct DeviceUpdateFirmwareParams {
    /// Site identifier
    pub site_id: String,
    /// Device identifier
    pub device_id: String
}

/// struct for passing parameters to the method [`get_compatible_devices`]
#[derive(Clone, Debug, Default)]
pub struct GetCompatibleDevicesParams {
    /// Site identifier
    pub site_id: String
}

/// struct for passing parameters to the method [`get_installed_devices`]
#[derive(Clone, Debug, Default)]
pub struct GetInstalledDevicesParams {
    /// Site identifier
    pub site_id: String
}

/// struct for passing parameters to the method [`get_site_lorawan_device_test`]
#[derive(Clone, Debug, Default)]
pub struct GetSiteLorawanDeviceTestParams {
    /// Site identifier
    pub site_id: String
}

/// struct for passing parameters to the method [`gsm_backup_sms_test`]
#[derive(Clone, Debug, Default)]
pub struct GsmBackupSmsTestParams {
    /// Site identifier
    pub site_id: String
}

/// struct for passing parameters to the method [`mode_hkp_get_details`]
#[derive(Clone, Debug, Default)]
pub struct ModeHkpGetDetailsParams {
    /// Site identifier
    pub site_id: String,
    /// Mode name
    pub mode_name: String
}

/// struct for passing parameters to the method [`mode_hkp_update`]
#[derive(Clone, Debug, Default)]
pub struct ModeHkpUpdateParams {
    /// Site identifier
    pub site_id: String,
    /// Mode name
    pub mode_name: String
}


/// struct for typed errors of method [`answer_call`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AnswerCallError {
    Status400(crate::models::ApiException),
    Status401(crate::models::ApiException),
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_action`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceActionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_calibration_start`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceCalibrationStartError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_calibration_stop`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceCalibrationStopError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_get_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceGetDetailsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_homekit_installation_start`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceHomekitInstallationStartError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_homekit_updates_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceHomekitUpdatesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_installation_extend`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceInstallationExtendError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_installation_start`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceInstallationStartError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_installation_stop`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceInstallationStopError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_reset`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceResetError {
    Status400(crate::models::ApiException),
    Status401(crate::models::ApiException),
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_reset_wifi`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceResetWifiError {
    Status400(crate::models::ApiException),
    Status401(crate::models::ApiException),
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_set_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceSetDetailsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_sound`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceSoundError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_uninstall_start`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceUninstallStartError {
    Status401(),
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_uninstall_stop`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceUninstallStopError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`device_update_firmware`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeviceUpdateFirmwareError {
    Status409(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compatible_devices`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompatibleDevicesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_installed_devices`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInstalledDevicesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_site_lorawan_device_test`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSiteLorawanDeviceTestError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`gsm_backup_sms_test`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GsmBackupSmsTestError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mode_hkp_get_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModeHkpGetDetailsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mode_hkp_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModeHkpUpdateError {
    Status400(),
    UnknownValue(serde_json::Value),
}


pub async fn answer_call(configuration: &configuration::Configuration, params: AnswerCallParams) -> Result<crate::models::Job, Error<AnswerCallError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;
    let session_id = params.session_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/access/answer_call", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&session_id);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AnswerCallError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_action(configuration: &configuration::Configuration, params: DeviceActionParams) -> Result<crate::models::JobCollection, Error<DeviceActionError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;
    let device_details = params.device_details;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/action", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&device_details);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceActionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Start calibration of a device (only for IntelliTAG)
pub async fn device_calibration_start(configuration: &configuration::Configuration, params: DeviceCalibrationStartParams) -> Result<crate::models::Job, Error<DeviceCalibrationStartError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/calibration", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceCalibrationStartError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Stop calibration of a device (only for IntelliTAG)
pub async fn device_calibration_stop(configuration: &configuration::Configuration, params: DeviceCalibrationStopParams) -> Result<crate::models::Job, Error<DeviceCalibrationStopError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/calibration/stop", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceCalibrationStopError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_get_details(configuration: &configuration::Configuration, params: DeviceGetDetailsParams) -> Result<crate::models::DeviceOutput, Error<DeviceGetDetailsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceGetDetailsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_homekit_installation_start(configuration: &configuration::Configuration, params: DeviceHomekitInstallationStartParams) -> Result<crate::models::Job, Error<DeviceHomekitInstallationStartError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let model = params.model;
    let install_options = params.install_options;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device-install-homekit/{model}", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), model=crate::apis::urlencode(model));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&install_options);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceHomekitInstallationStartError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_homekit_updates_get(configuration: &configuration::Configuration, params: DeviceHomekitUpdatesGetParams) -> Result<(), Error<DeviceHomekitUpdatesGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/homekit/qrcode", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeviceHomekitUpdatesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_installation_extend(configuration: &configuration::Configuration, params: DeviceInstallationExtendParams) -> Result<crate::models::Job, Error<DeviceInstallationExtendError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let model = params.model;
    let extend_options = params.extend_options;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device-install/{model}/extend", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), model=crate::apis::urlencode(model));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&extend_options);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceInstallationExtendError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_installation_start(configuration: &configuration::Configuration, params: DeviceInstallationStartParams) -> Result<crate::models::Job, Error<DeviceInstallationStartError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let model = params.model;
    let install_options = params.install_options;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device-install/{model}", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), model=crate::apis::urlencode(model));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&install_options);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceInstallationStartError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_installation_stop(configuration: &configuration::Configuration, params: DeviceInstallationStopParams) -> Result<crate::models::Job, Error<DeviceInstallationStopError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let model = params.model;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device-install/{model}", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), model=crate::apis::urlencode(model));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceInstallationStopError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_reset(configuration: &configuration::Configuration, params: DeviceResetParams) -> Result<crate::models::Reset, Error<DeviceResetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;
    let wifi_credentials = params.wifi_credentials;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/reset", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&wifi_credentials);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceResetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_reset_wifi(configuration: &configuration::Configuration, params: DeviceResetWifiParams) -> Result<crate::models::Reset, Error<DeviceResetWifiError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/reset_wifi", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceResetWifiError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_set_details(configuration: &configuration::Configuration, params: DeviceSetDetailsParams) -> Result<crate::models::Job, Error<DeviceSetDetailsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;
    let device_details = params.device_details;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&device_details);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceSetDetailsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_sound(configuration: &configuration::Configuration, params: DeviceSoundParams) -> Result<crate::models::Job, Error<DeviceSoundError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;
    let sound_ref = params.sound_ref;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/sound/{sound_ref}", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id), sound_ref=crate::apis::urlencode(sound_ref));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceSoundError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_uninstall_start(configuration: &configuration::Configuration, params: DeviceUninstallStartParams) -> Result<crate::models::Job, Error<DeviceUninstallStartError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/uninstall", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceUninstallStartError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_uninstall_stop(configuration: &configuration::Configuration, params: DeviceUninstallStopParams) -> Result<crate::models::Job, Error<DeviceUninstallStopError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/uninstall", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceUninstallStopError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn device_update_firmware(configuration: &configuration::Configuration, params: DeviceUpdateFirmwareParams) -> Result<crate::models::Job, Error<DeviceUpdateFirmwareError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let device_id = params.device_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/{device_id}/update", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), device_id=crate::apis::urlencode(device_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeviceUpdateFirmwareError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compatible_devices(configuration: &configuration::Configuration, params: GetCompatibleDevicesParams) -> Result<crate::models::DeviceCompatibilityCollection, Error<GetCompatibleDevicesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device-compatible", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompatibleDevicesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_installed_devices(configuration: &configuration::Configuration, params: GetInstalledDevicesParams) -> Result<crate::models::DeviceCollection, Error<GetInstalledDevicesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetInstalledDevicesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_site_lorawan_device_test(configuration: &configuration::Configuration, params: GetSiteLorawanDeviceTestParams) -> Result<(), Error<GetSiteLorawanDeviceTestError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/lorawan/test", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GetSiteLorawanDeviceTestError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn gsm_backup_sms_test(configuration: &configuration::Configuration, params: GsmBackupSmsTestParams) -> Result<(), Error<GsmBackupSmsTestError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/device/backup-gsm/test", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GsmBackupSmsTestError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn mode_hkp_get_details(configuration: &configuration::Configuration, params: ModeHkpGetDetailsParams) -> Result<crate::models::HkpMode, Error<ModeHkpGetDetailsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let mode_name = params.mode_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/mode/{mode_name}", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), mode_name=crate::apis::urlencode(mode_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModeHkpGetDetailsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn mode_hkp_update(configuration: &configuration::Configuration, params: ModeHkpUpdateParams) -> Result<crate::models::Job, Error<ModeHkpUpdateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let mode_name = params.mode_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/mode/{mode_name}", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), mode_name=crate::apis::urlencode(mode_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModeHkpUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

