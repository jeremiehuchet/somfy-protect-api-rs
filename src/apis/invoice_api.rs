/*
 * Somfy Protect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`invoice_list`]
#[derive(Clone, Debug, Default)]
pub struct InvoiceListParams {
    /// Site identifier
    pub site_id: String,
    /// ISO 8601 UTC timestamp (example: '2014-07-14T07:45:00.000Z').
    pub date_min: Option<String>,
    /// ISO 8601 UTC timestamp (example: '2014-07-14T07:45:00.000Z').
    pub date_max: Option<String>,
    /// Set results order. '1' for ascending, '-1' for descending. Default: descending.
    pub order: Option<String>,
    /// Limit of results. Default: 50. Max: 200.
    pub limit: Option<i32>,
    /// ISO 8601 microseconds timestamp to get next page (based on 'paid_on' value).
    pub start_after: Option<String>,
    /// ISO 8601 microseconds timestamp to get previous page (based on 'paid_on' value).
    pub end_before: Option<String>
}

/// struct for passing parameters to the method [`invoice_pdf`]
#[derive(Clone, Debug, Default)]
pub struct InvoicePdfParams {
    /// Site identifier
    pub site_id: String,
    /// Invoice identifier
    pub invoice_id: String
}


/// struct for typed errors of method [`invoice_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InvoiceListError {
    Status404(crate::models::ApiException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`invoice_pdf`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InvoicePdfError {
    Status404(),
    UnknownValue(serde_json::Value),
}


pub async fn invoice_list(configuration: &configuration::Configuration, params: InvoiceListParams) -> Result<crate::models::ServiceInvoiceCollection, Error<InvoiceListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let date_min = params.date_min;
    let date_max = params.date_max;
    let order = params.order;
    let limit = params.limit;
    let start_after = params.start_after;
    let end_before = params.end_before;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/invoice", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = date_min {
        local_var_req_builder = local_var_req_builder.query(&[("date_min", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date_max {
        local_var_req_builder = local_var_req_builder.query(&[("date_max", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder = local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_after {
        local_var_req_builder = local_var_req_builder.query(&[("start_after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_before {
        local_var_req_builder = local_var_req_builder.query(&[("end_before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InvoiceListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn invoice_pdf(configuration: &configuration::Configuration, params: InvoicePdfParams) -> Result<(), Error<InvoicePdfError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let site_id = params.site_id;
    let invoice_id = params.invoice_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/site/{site_id}/invoice/{invoice_id}", local_var_configuration.base_path, site_id=crate::apis::urlencode(site_id), invoice_id=crate::apis::urlencode(invoice_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<InvoicePdfError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

